import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.nio.file.attribute.FileTime
import java.text.SimpleDateFormat
import java.util.zip.*

apply plugin: 'java'

repositories {
    mavenCentral()
    maven { url "https://libraries.minecraft.net/" }
    maven { url "https://repo.marcloud.net/" }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

version = "1.8.9"
description = "FPSBoost_V2"

dependencies {
    // Netty 别改，mc要求这个版本
    implementation 'io.netty:netty-all:4.0.23.Final'

    // System related
    implementation 'oshi:oshi-core:1.1'

    // Command line
    implementation 'net.sf.jopt-simple:jopt-simple:4.6'

    implementation 'org.lwjgl:lwjgl:2.9.4-nightly'
    implementation 'org.lwjgl:util:2.9.4-nightly'

    // Apache HttpComponents
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.apache.httpcomponents:httpcore:4.3.2'

    // JNA (Java Native Access)
    implementation('net.java.dev.jna:jna:3.4.0')
    implementation('net.java.dev.jna:platform:3.4.0') {
        exclude group: 'net.java.dev.jna', module: 'jna'
    }

    // Logging - UPDATE TO LATEST VERSION
    implementation 'org.apache.logging.log4j:log4j-api:2.0-beta9'
    implementation 'org.apache.logging.log4j:log4j-core:2.0-beta9'

    // Miscellaneous
    implementation 'org.apache.commons:commons-compress:1.26.0'
    implementation 'org.apache.commons:commons-lang3:3.3.2'
    implementation 'commons-io:commons-io:2.14.0'
    implementation 'commons-codec:commons-codec:1.13'
    // 别改，mc要求这个版本
    implementation 'com.google.guava:guava:17.0'
    implementation 'com.google.code.gson:gson:2.8.9'

    // Sound Libraries
    implementation 'com.paulscode.sound:libraryjavasound:20101123'
    implementation 'com.paulscode.sound:codecwav:20101023'
    implementation 'com.paulscode.sound:soundsystem:20120107'
    implementation 'com.paulscode.sound:codecjorbis:20101023'
    implementation 'com.paulscode.sound:librarylwjglopenal:20100824'

    // Mojang
    implementation 'com.mojang:realmsclient:1.7.59'
    implementation 'com.mojang:icu4j-core-mojang:51.2'
    implementation 'com.mojang:authlib:1.5.21'

    // Twitch
    implementation 'tv.twitch:twitch:6.5'

    // Lombok
    implementation 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    // jinput
    implementation 'net.java.jinput:jinput:2.0.5'
}

// 添加 ProGuard 配置
configurations {
    proguard
}

dependencies {
    proguard 'net.sf.proguard:proguard-base:6.2.2'
}

def javaVersion = JavaVersion.current().majorVersion as int
def libraryJarPath

if (javaVersion == 8) {
    libraryJarPath = System.getProperty("java.home") + "/lib/rt.jar"
} else if (javaVersion >= 9) {
    libraryJarPath = System.getProperty("java.home") + "/jmods/java.base.jmod"
} else {
    throw new GradleException("Unsupported Java version: " + javaVersion)
}

if (!file(libraryJarPath).exists()) {
    throw new GradleException("Library JAR not found at: " + libraryJarPath)
}

tasks.register('obfuscateJar', JavaExec) {
    main = '-jar'
    args = [
            'obf/proguard.jar',
            '@obf/proguard.cfg',
            '-injars', 'build/libs/' + project.name + '-' + version + '.jar',
            '-outjars', 'build/libs/FPSBoost_V2/FPSBoost_V2.jar',
            '-libraryjars', libraryJarPath
    ]

    def libraries = configurations.runtimeClasspath.files
    libraries.each { jar ->
        args += ['-libraryjars', jar.absolutePath]
    }

    doLast {
        def sourceFile = new File(buildDir, "libs/FPSBoost_V2/FPSBoost_V2.jar")
        def destinationDir = new File("C:/Users/Administrator/AppData/Roaming/.minecraft/versions/FPSBoost_V2/")

        if (!sourceFile.exists()) {
            throw new GradleException("JAR 文件不存在: ${sourceFile.absolutePath}")
        }

        if (!destinationDir.exists()) {
            destinationDir.mkdirs()
        }

        def tempFile = new File(sourceFile.parent, "temp.jar")
        if (tempFile.exists()) {
            tempFile.delete()
        }
        tempFile.createNewFile()

        sourceFile.withInputStream { input ->
            tempFile.withOutputStream { output ->
                def zipIn = new ZipInputStream(new BufferedInputStream(input))
                def zipOut = new ZipOutputStream(new BufferedOutputStream(output))
                zipOut.setComment("FPSBoost_V2 \nWebsite: https://www.fpsboost.cn/")

                def buffer = new byte[8192]
                int len
                ZipEntry entry

                def foundingTime = 1305648000000

                while ((entry = zipIn.getNextEntry()) != null) {
                    def newEntry = new ZipEntry(entry.name)
                    newEntry.setTime(foundingTime)
                    zipOut.putNextEntry(newEntry)

                    while ((len = zipIn.read(buffer)) != -1) {
                        zipOut.write(buffer, 0, len)
                    }

                    zipOut.closeEntry()
                }

                zipOut.flush()
                zipOut.close()
                zipIn.close()
            }
        }

        Files.move(tempFile.toPath(), sourceFile.toPath(), StandardCopyOption.REPLACE_EXISTING)

        copy {
            from sourceFile
            into destinationDir
        }

        println "复制 JAR 到: ${destinationDir.absolutePath}"
    }
}

// 构建完成后自动执行混淆
build.finalizedBy obfuscateJar
